// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api_v1_beta1 is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Experiment
	ExperimentSpec
	ParameterSpec
	FeasibleSpace
	ObjectiveSpec
	AlgorithmSpec
	AlgorithmSetting
	EarlyStoppingSpec
	EarlyStoppingSetting
	NasConfig
	GraphConfig
	Operation
	Trial
	TrialSpec
	ParameterAssignment
	TrialStatus
	Observation
	Metric
	ReportObservationLogRequest
	ReportObservationLogReply
	ObservationLog
	MetricLog
	GetObservationLogRequest
	GetObservationLogReply
	DeleteObservationLogRequest
	DeleteObservationLogReply
	GetSuggestionsRequest
	GetSuggestionsReply
	ValidateAlgorithmSettingsRequest
	ValidateAlgorithmSettingsReply
	GetEarlyStoppingRulesRequest
	GetEarlyStoppingRulesReply
	EarlyStoppingRule
	ValidateEarlyStoppingSettingsRequest
	ValidateEarlyStoppingSettingsReply
	SetTrialStatusRequest
	SetTrialStatusReply
*/
package api_v1_beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Types of value for HyperParameter.
type ParameterType int32

const (
	ParameterType_UNKNOWN_TYPE ParameterType = 0
	ParameterType_DOUBLE       ParameterType = 1
	ParameterType_INT          ParameterType = 2
	ParameterType_DISCRETE     ParameterType = 3
	ParameterType_CATEGORICAL  ParameterType = 4
)

var ParameterType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "DOUBLE",
	2: "INT",
	3: "DISCRETE",
	4: "CATEGORICAL",
}
var ParameterType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"DOUBLE":       1,
	"INT":          2,
	"DISCRETE":     3,
	"CATEGORICAL":  4,
}

func (x ParameterType) String() string {
	return proto.EnumName(ParameterType_name, int32(x))
}
func (ParameterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Direction of optimization. Minimize or Maximize.
type ObjectiveType int32

const (
	ObjectiveType_UNKNOWN  ObjectiveType = 0
	ObjectiveType_MINIMIZE ObjectiveType = 1
	ObjectiveType_MAXIMIZE ObjectiveType = 2
)

var ObjectiveType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MINIMIZE",
	2: "MAXIMIZE",
}
var ObjectiveType_value = map[string]int32{
	"UNKNOWN":  0,
	"MINIMIZE": 1,
	"MAXIMIZE": 2,
}

func (x ObjectiveType) String() string {
	return proto.EnumName(ObjectiveType_name, int32(x))
}
func (ObjectiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ComparisonType int32

const (
	ComparisonType_UNKNOWN_COMPARISON ComparisonType = 0
	ComparisonType_EQUAL              ComparisonType = 1
	ComparisonType_LESS               ComparisonType = 2
	ComparisonType_GREATER            ComparisonType = 3
)

var ComparisonType_name = map[int32]string{
	0: "UNKNOWN_COMPARISON",
	1: "EQUAL",
	2: "LESS",
	3: "GREATER",
}
var ComparisonType_value = map[string]int32{
	"UNKNOWN_COMPARISON": 0,
	"EQUAL":              1,
	"LESS":               2,
	"GREATER":            3,
}

func (x ComparisonType) String() string {
	return proto.EnumName(ComparisonType_name, int32(x))
}
func (ComparisonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Trial can be in one of 6 conditions.
// TODO (andreyvelich): Remove unused conditions.
type TrialStatus_TrialConditionType int32

const (
	TrialStatus_CREATED      TrialStatus_TrialConditionType = 0
	TrialStatus_RUNNING      TrialStatus_TrialConditionType = 1
	TrialStatus_SUCCEEDED    TrialStatus_TrialConditionType = 2
	TrialStatus_KILLED       TrialStatus_TrialConditionType = 3
	TrialStatus_FAILED       TrialStatus_TrialConditionType = 4
	TrialStatus_EARLYSTOPPED TrialStatus_TrialConditionType = 5
	TrialStatus_UNKNOWN      TrialStatus_TrialConditionType = 6
)

var TrialStatus_TrialConditionType_name = map[int32]string{
	0: "CREATED",
	1: "RUNNING",
	2: "SUCCEEDED",
	3: "KILLED",
	4: "FAILED",
	5: "EARLYSTOPPED",
	6: "UNKNOWN",
}
var TrialStatus_TrialConditionType_value = map[string]int32{
	"CREATED":      0,
	"RUNNING":      1,
	"SUCCEEDED":    2,
	"KILLED":       3,
	"FAILED":       4,
	"EARLYSTOPPED": 5,
	"UNKNOWN":      6,
}

func (x TrialStatus_TrialConditionType) String() string {
	return proto.EnumName(TrialStatus_TrialConditionType_name, int32(x))
}
func (TrialStatus_TrialConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

// *
// Structure for a single Experiment.
type Experiment struct {
	Name string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec *ExperimentSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetSpec() *ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// *
// Specification of an Experiment. Experiment represents a single optimization run over a feasible space.
// Each Experiment contains a configuration describing the feasible space, as well as a set of Trials.
// It is assumed that objective function f(x) does not change in the course of an Experiment.
type ExperimentSpec struct {
	ParameterSpecs     *ExperimentSpec_ParameterSpecs `protobuf:"bytes,1,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
	Objective          *ObjectiveSpec                 `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
	Algorithm          *AlgorithmSpec                 `protobuf:"bytes,3,opt,name=algorithm" json:"algorithm,omitempty"`
	EarlyStopping      *EarlyStoppingSpec             `protobuf:"bytes,4,opt,name=early_stopping,json=earlyStopping" json:"early_stopping,omitempty"`
	ParallelTrialCount int32                          `protobuf:"varint,5,opt,name=parallel_trial_count,json=parallelTrialCount" json:"parallel_trial_count,omitempty"`
	MaxTrialCount      int32                          `protobuf:"varint,6,opt,name=max_trial_count,json=maxTrialCount" json:"max_trial_count,omitempty"`
	NasConfig          *NasConfig                     `protobuf:"bytes,7,opt,name=nas_config,json=nasConfig" json:"nas_config,omitempty"`
}

func (m *ExperimentSpec) Reset()                    { *m = ExperimentSpec{} }
func (m *ExperimentSpec) String() string            { return proto.CompactTextString(m) }
func (*ExperimentSpec) ProtoMessage()               {}
func (*ExperimentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExperimentSpec) GetParameterSpecs() *ExperimentSpec_ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

func (m *ExperimentSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *ExperimentSpec) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *ExperimentSpec) GetEarlyStopping() *EarlyStoppingSpec {
	if m != nil {
		return m.EarlyStopping
	}
	return nil
}

func (m *ExperimentSpec) GetParallelTrialCount() int32 {
	if m != nil {
		return m.ParallelTrialCount
	}
	return 0
}

func (m *ExperimentSpec) GetMaxTrialCount() int32 {
	if m != nil {
		return m.MaxTrialCount
	}
	return 0
}

func (m *ExperimentSpec) GetNasConfig() *NasConfig {
	if m != nil {
		return m.NasConfig
	}
	return nil
}

// *
// List of ParameterSpec.
type ExperimentSpec_ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ExperimentSpec_ParameterSpecs) Reset()         { *m = ExperimentSpec_ParameterSpecs{} }
func (m *ExperimentSpec_ParameterSpecs) String() string { return proto.CompactTextString(m) }
func (*ExperimentSpec_ParameterSpecs) ProtoMessage()    {}
func (*ExperimentSpec_ParameterSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *ExperimentSpec_ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// *
// Config for a hyperparameter.
// Katib will create each Hyper parameter from this config.
type ParameterSpec struct {
	Name          string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType ParameterType  `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,enum=api.v1.beta1.ParameterType" json:"parameter_type,omitempty"`
	FeasibleSpace *FeasibleSpace `protobuf:"bytes,3,opt,name=feasible_space,json=feasibleSpace" json:"feasible_space,omitempty"`
}

func (m *ParameterSpec) Reset()                    { *m = ParameterSpec{} }
func (m *ParameterSpec) String() string            { return proto.CompactTextString(m) }
func (*ParameterSpec) ProtoMessage()               {}
func (*ParameterSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ParameterSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterSpec) GetParameterType() ParameterType {
	if m != nil {
		return m.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (m *ParameterSpec) GetFeasibleSpace() *FeasibleSpace {
	if m != nil {
		return m.FeasibleSpace
	}
	return nil
}

// *
// Feasible space for optimization.
// Int and Double type use Max/Min.
// Discrete and Categorical type use List.
type FeasibleSpace struct {
	Max  string   `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min  string   `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Step string   `protobuf:"bytes,4,opt,name=step" json:"step,omitempty"`
}

func (m *FeasibleSpace) Reset()                    { *m = FeasibleSpace{} }
func (m *FeasibleSpace) String() string            { return proto.CompactTextString(m) }
func (*FeasibleSpace) ProtoMessage()               {}
func (*FeasibleSpace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FeasibleSpace) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *FeasibleSpace) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *FeasibleSpace) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FeasibleSpace) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// *
// Objective specification.
type ObjectiveSpec struct {
	Type                ObjectiveType `protobuf:"varint,1,opt,name=type,enum=api.v1.beta1.ObjectiveType" json:"type,omitempty"`
	Goal                float64       `protobuf:"fixed64,2,opt,name=goal" json:"goal,omitempty"`
	ObjectiveMetricName string        `protobuf:"bytes,3,opt,name=objective_metric_name,json=objectiveMetricName" json:"objective_metric_name,omitempty"`
	// List of additional metrics to record from Trial.
	// This can be empty if we only care about the objective metric.
	AdditionalMetricNames []string `protobuf:"bytes,4,rep,name=additional_metric_names,json=additionalMetricNames" json:"additional_metric_names,omitempty"`
}

func (m *ObjectiveSpec) Reset()                    { *m = ObjectiveSpec{} }
func (m *ObjectiveSpec) String() string            { return proto.CompactTextString(m) }
func (*ObjectiveSpec) ProtoMessage()               {}
func (*ObjectiveSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ObjectiveSpec) GetType() ObjectiveType {
	if m != nil {
		return m.Type
	}
	return ObjectiveType_UNKNOWN
}

func (m *ObjectiveSpec) GetGoal() float64 {
	if m != nil {
		return m.Goal
	}
	return 0
}

func (m *ObjectiveSpec) GetObjectiveMetricName() string {
	if m != nil {
		return m.ObjectiveMetricName
	}
	return ""
}

func (m *ObjectiveSpec) GetAdditionalMetricNames() []string {
	if m != nil {
		return m.AdditionalMetricNames
	}
	return nil
}

// *
// HP or NAS algorithm specification.
type AlgorithmSpec struct {
	AlgorithmName     string              `protobuf:"bytes,1,opt,name=algorithm_name,json=algorithmName" json:"algorithm_name,omitempty"`
	AlgorithmSettings []*AlgorithmSetting `protobuf:"bytes,2,rep,name=algorithm_settings,json=algorithmSettings" json:"algorithm_settings,omitempty"`
}

func (m *AlgorithmSpec) Reset()                    { *m = AlgorithmSpec{} }
func (m *AlgorithmSpec) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSpec) ProtoMessage()               {}
func (*AlgorithmSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlgorithmSpec) GetAlgorithmName() string {
	if m != nil {
		return m.AlgorithmName
	}
	return ""
}

func (m *AlgorithmSpec) GetAlgorithmSettings() []*AlgorithmSetting {
	if m != nil {
		return m.AlgorithmSettings
	}
	return nil
}

// *
// HP or NAS algorithm settings.
type AlgorithmSetting struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AlgorithmSetting) Reset()                    { *m = AlgorithmSetting{} }
func (m *AlgorithmSetting) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSetting) ProtoMessage()               {}
func (*AlgorithmSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AlgorithmSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlgorithmSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// *
// Early stopping algorithm specification.
type EarlyStoppingSpec struct {
	AlgorithmName     string                  `protobuf:"bytes,1,opt,name=algorithm_name,json=algorithmName" json:"algorithm_name,omitempty"`
	AlgorithmSettings []*EarlyStoppingSetting `protobuf:"bytes,2,rep,name=algorithm_settings,json=algorithmSettings" json:"algorithm_settings,omitempty"`
}

func (m *EarlyStoppingSpec) Reset()                    { *m = EarlyStoppingSpec{} }
func (m *EarlyStoppingSpec) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingSpec) ProtoMessage()               {}
func (*EarlyStoppingSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EarlyStoppingSpec) GetAlgorithmName() string {
	if m != nil {
		return m.AlgorithmName
	}
	return ""
}

func (m *EarlyStoppingSpec) GetAlgorithmSettings() []*EarlyStoppingSetting {
	if m != nil {
		return m.AlgorithmSettings
	}
	return nil
}

// *
// Early stopping algorithm settings.
type EarlyStoppingSetting struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EarlyStoppingSetting) Reset()                    { *m = EarlyStoppingSetting{} }
func (m *EarlyStoppingSetting) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingSetting) ProtoMessage()               {}
func (*EarlyStoppingSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EarlyStoppingSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EarlyStoppingSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// *
// NasConfig contains a config of NAS job
type NasConfig struct {
	GraphConfig *GraphConfig          `protobuf:"bytes,1,opt,name=graph_config,json=graphConfig" json:"graph_config,omitempty"`
	Operations  *NasConfig_Operations `protobuf:"bytes,2,opt,name=operations" json:"operations,omitempty"`
}

func (m *NasConfig) Reset()                    { *m = NasConfig{} }
func (m *NasConfig) String() string            { return proto.CompactTextString(m) }
func (*NasConfig) ProtoMessage()               {}
func (*NasConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NasConfig) GetGraphConfig() *GraphConfig {
	if m != nil {
		return m.GraphConfig
	}
	return nil
}

func (m *NasConfig) GetOperations() *NasConfig_Operations {
	if m != nil {
		return m.Operations
	}
	return nil
}

type NasConfig_Operations struct {
	Operation []*Operation `protobuf:"bytes,1,rep,name=operation" json:"operation,omitempty"`
}

func (m *NasConfig_Operations) Reset()                    { *m = NasConfig_Operations{} }
func (m *NasConfig_Operations) String() string            { return proto.CompactTextString(m) }
func (*NasConfig_Operations) ProtoMessage()               {}
func (*NasConfig_Operations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *NasConfig_Operations) GetOperation() []*Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// *
// GraphConfig contains a config of DAG
type GraphConfig struct {
	NumLayers   int32   `protobuf:"varint,1,opt,name=num_layers,json=numLayers" json:"num_layers,omitempty"`
	InputSizes  []int32 `protobuf:"varint,2,rep,packed,name=input_sizes,json=inputSizes" json:"input_sizes,omitempty"`
	OutputSizes []int32 `protobuf:"varint,3,rep,packed,name=output_sizes,json=outputSizes" json:"output_sizes,omitempty"`
}

func (m *GraphConfig) Reset()                    { *m = GraphConfig{} }
func (m *GraphConfig) String() string            { return proto.CompactTextString(m) }
func (*GraphConfig) ProtoMessage()               {}
func (*GraphConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GraphConfig) GetNumLayers() int32 {
	if m != nil {
		return m.NumLayers
	}
	return 0
}

func (m *GraphConfig) GetInputSizes() []int32 {
	if m != nil {
		return m.InputSizes
	}
	return nil
}

func (m *GraphConfig) GetOutputSizes() []int32 {
	if m != nil {
		return m.OutputSizes
	}
	return nil
}

// *
// Config for operations in DAG
type Operation struct {
	OperationType  string                    `protobuf:"bytes,1,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	ParameterSpecs *Operation_ParameterSpecs `protobuf:"bytes,2,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Operation) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *Operation) GetParameterSpecs() *Operation_ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

// *
// List of ParameterSpec
type Operation_ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *Operation_ParameterSpecs) Reset()                    { *m = Operation_ParameterSpecs{} }
func (m *Operation_ParameterSpecs) String() string            { return proto.CompactTextString(m) }
func (*Operation_ParameterSpecs) ProtoMessage()               {}
func (*Operation_ParameterSpecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *Operation_ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// *
// Structure for a single Trial.
type Trial struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec   *TrialSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *TrialStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Trial) Reset()                    { *m = Trial{} }
func (m *Trial) String() string            { return proto.CompactTextString(m) }
func (*Trial) ProtoMessage()               {}
func (*Trial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Trial) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trial) GetSpec() *TrialSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Trial) GetStatus() *TrialStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// *
// Specification of a Trial. It represents Trial's parameter assignments and objective.
type TrialSpec struct {
	Objective            *ObjectiveSpec                  `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
	ParameterAssignments *TrialSpec_ParameterAssignments `protobuf:"bytes,3,opt,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
}

func (m *TrialSpec) Reset()                    { *m = TrialSpec{} }
func (m *TrialSpec) String() string            { return proto.CompactTextString(m) }
func (*TrialSpec) ProtoMessage()               {}
func (*TrialSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TrialSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *TrialSpec) GetParameterAssignments() *TrialSpec_ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

// *
// List of ParameterAssignment
type TrialSpec_ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *TrialSpec_ParameterAssignments) Reset()         { *m = TrialSpec_ParameterAssignments{} }
func (m *TrialSpec_ParameterAssignments) String() string { return proto.CompactTextString(m) }
func (*TrialSpec_ParameterAssignments) ProtoMessage()    {}
func (*TrialSpec_ParameterAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *TrialSpec_ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type ParameterAssignment struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ParameterAssignment) Reset()                    { *m = ParameterAssignment{} }
func (m *ParameterAssignment) String() string            { return proto.CompactTextString(m) }
func (*ParameterAssignment) ProtoMessage()               {}
func (*ParameterAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ParameterAssignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterAssignment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// *
// Current Trial status. It contains Trial's latest condition, start time, completion time, observation.
type TrialStatus struct {
	StartTime      string                         `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime string                         `protobuf:"bytes,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Condition      TrialStatus_TrialConditionType `protobuf:"varint,3,opt,name=condition,enum=api.v1.beta1.TrialStatus_TrialConditionType" json:"condition,omitempty"`
	Observation    *Observation                   `protobuf:"bytes,4,opt,name=observation" json:"observation,omitempty"`
}

func (m *TrialStatus) Reset()                    { *m = TrialStatus{} }
func (m *TrialStatus) String() string            { return proto.CompactTextString(m) }
func (*TrialStatus) ProtoMessage()               {}
func (*TrialStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TrialStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TrialStatus) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *TrialStatus) GetCondition() TrialStatus_TrialConditionType {
	if m != nil {
		return m.Condition
	}
	return TrialStatus_CREATED
}

func (m *TrialStatus) GetObservation() *Observation {
	if m != nil {
		return m.Observation
	}
	return nil
}

type Observation struct {
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Observation) Reset()                    { *m = Observation{} }
func (m *Observation) String() string            { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()               {}
func (*Observation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Observation) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Metric struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ReportObservationLogRequest struct {
	TrialName      string          `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	ObservationLog *ObservationLog `protobuf:"bytes,2,opt,name=observation_log,json=observationLog" json:"observation_log,omitempty"`
}

func (m *ReportObservationLogRequest) Reset()                    { *m = ReportObservationLogRequest{} }
func (m *ReportObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportObservationLogRequest) ProtoMessage()               {}
func (*ReportObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReportObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *ReportObservationLogRequest) GetObservationLog() *ObservationLog {
	if m != nil {
		return m.ObservationLog
	}
	return nil
}

type ReportObservationLogReply struct {
}

func (m *ReportObservationLogReply) Reset()                    { *m = ReportObservationLogReply{} }
func (m *ReportObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*ReportObservationLogReply) ProtoMessage()               {}
func (*ReportObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ObservationLog struct {
	MetricLogs []*MetricLog `protobuf:"bytes,1,rep,name=metric_logs,json=metricLogs" json:"metric_logs,omitempty"`
}

func (m *ObservationLog) Reset()                    { *m = ObservationLog{} }
func (m *ObservationLog) String() string            { return proto.CompactTextString(m) }
func (*ObservationLog) ProtoMessage()               {}
func (*ObservationLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ObservationLog) GetMetricLogs() []*MetricLog {
	if m != nil {
		return m.MetricLogs
	}
	return nil
}

type MetricLog struct {
	TimeStamp string  `protobuf:"bytes,1,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Metric    *Metric `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
}

func (m *MetricLog) Reset()                    { *m = MetricLog{} }
func (m *MetricLog) String() string            { return proto.CompactTextString(m) }
func (*MetricLog) ProtoMessage()               {}
func (*MetricLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MetricLog) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *MetricLog) GetMetric() *Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

type GetObservationLogRequest struct {
	TrialName  string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	MetricName string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	StartTime  string `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime    string `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *GetObservationLogRequest) Reset()                    { *m = GetObservationLogRequest{} }
func (m *GetObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObservationLogRequest) ProtoMessage()               {}
func (*GetObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *GetObservationLogRequest) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *GetObservationLogRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetObservationLogRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type GetObservationLogReply struct {
	ObservationLog *ObservationLog `protobuf:"bytes,1,opt,name=observation_log,json=observationLog" json:"observation_log,omitempty"`
}

func (m *GetObservationLogReply) Reset()                    { *m = GetObservationLogReply{} }
func (m *GetObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetObservationLogReply) ProtoMessage()               {}
func (*GetObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetObservationLogReply) GetObservationLog() *ObservationLog {
	if m != nil {
		return m.ObservationLog
	}
	return nil
}

type DeleteObservationLogRequest struct {
	TrialName string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
}

func (m *DeleteObservationLogRequest) Reset()                    { *m = DeleteObservationLogRequest{} }
func (m *DeleteObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteObservationLogRequest) ProtoMessage()               {}
func (*DeleteObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeleteObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

type DeleteObservationLogReply struct {
}

func (m *DeleteObservationLogReply) Reset()                    { *m = DeleteObservationLogReply{} }
func (m *DeleteObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteObservationLogReply) ProtoMessage()               {}
func (*DeleteObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type GetSuggestionsRequest struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
	Trials     []*Trial    `protobuf:"bytes,2,rep,name=trials" json:"trials,omitempty"`
	// Use current_request_number instead. This API will be removed in Katib 0.14.
	// The number of Suggestions requested at one time.
	RequestNumber int32 `protobuf:"varint,3,opt,name=request_number,json=requestNumber" json:"request_number,omitempty"`
	// The number of Suggestions requested at one time.
	// When you set 3 to current_request_number, you get three Suggestions at one time.
	CurrentRequestNumber int32 `protobuf:"varint,4,opt,name=current_request_number,json=currentRequestNumber" json:"current_request_number,omitempty"`
	TotalRequestNumber   int32 `protobuf:"varint,5,opt,name=total_request_number,json=totalRequestNumber" json:"total_request_number,omitempty"`
}

func (m *GetSuggestionsRequest) Reset()                    { *m = GetSuggestionsRequest{} }
func (m *GetSuggestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSuggestionsRequest) ProtoMessage()               {}
func (*GetSuggestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetSuggestionsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *GetSuggestionsRequest) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *GetSuggestionsRequest) GetRequestNumber() int32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

func (m *GetSuggestionsRequest) GetCurrentRequestNumber() int32 {
	if m != nil {
		return m.CurrentRequestNumber
	}
	return 0
}

func (m *GetSuggestionsRequest) GetTotalRequestNumber() int32 {
	if m != nil {
		return m.TotalRequestNumber
	}
	return 0
}

type GetSuggestionsReply struct {
	ParameterAssignments []*GetSuggestionsReply_ParameterAssignments `protobuf:"bytes,1,rep,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
	Algorithm            *AlgorithmSpec                              `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
	EarlyStoppingRules   []*EarlyStoppingRule                        `protobuf:"bytes,3,rep,name=early_stopping_rules,json=earlyStoppingRules" json:"early_stopping_rules,omitempty"`
}

func (m *GetSuggestionsReply) Reset()                    { *m = GetSuggestionsReply{} }
func (m *GetSuggestionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSuggestionsReply) ProtoMessage()               {}
func (*GetSuggestionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetSuggestionsReply) GetParameterAssignments() []*GetSuggestionsReply_ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

func (m *GetSuggestionsReply) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *GetSuggestionsReply) GetEarlyStoppingRules() []*EarlyStoppingRule {
	if m != nil {
		return m.EarlyStoppingRules
	}
	return nil
}

type GetSuggestionsReply_ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *GetSuggestionsReply_ParameterAssignments) Reset() {
	*m = GetSuggestionsReply_ParameterAssignments{}
}
func (m *GetSuggestionsReply_ParameterAssignments) String() string { return proto.CompactTextString(m) }
func (*GetSuggestionsReply_ParameterAssignments) ProtoMessage()    {}
func (*GetSuggestionsReply_ParameterAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 0}
}

func (m *GetSuggestionsReply_ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type ValidateAlgorithmSettingsRequest struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
}

func (m *ValidateAlgorithmSettingsRequest) Reset()         { *m = ValidateAlgorithmSettingsRequest{} }
func (m *ValidateAlgorithmSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateAlgorithmSettingsRequest) ProtoMessage()    {}
func (*ValidateAlgorithmSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

func (m *ValidateAlgorithmSettingsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

// *
// Return INVALID_ARGUMENT Error if Algorithm Settings are not Valid
type ValidateAlgorithmSettingsReply struct {
}

func (m *ValidateAlgorithmSettingsReply) Reset()                    { *m = ValidateAlgorithmSettingsReply{} }
func (m *ValidateAlgorithmSettingsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateAlgorithmSettingsReply) ProtoMessage()               {}
func (*ValidateAlgorithmSettingsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type GetEarlyStoppingRulesRequest struct {
	Experiment       *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
	Trials           []*Trial    `protobuf:"bytes,2,rep,name=trials" json:"trials,omitempty"`
	DbManagerAddress string      `protobuf:"bytes,3,opt,name=db_manager_address,json=dbManagerAddress" json:"db_manager_address,omitempty"`
}

func (m *GetEarlyStoppingRulesRequest) Reset()                    { *m = GetEarlyStoppingRulesRequest{} }
func (m *GetEarlyStoppingRulesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEarlyStoppingRulesRequest) ProtoMessage()               {}
func (*GetEarlyStoppingRulesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetEarlyStoppingRulesRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *GetEarlyStoppingRulesRequest) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *GetEarlyStoppingRulesRequest) GetDbManagerAddress() string {
	if m != nil {
		return m.DbManagerAddress
	}
	return ""
}

type GetEarlyStoppingRulesReply struct {
	EarlyStoppingRules []*EarlyStoppingRule `protobuf:"bytes,1,rep,name=early_stopping_rules,json=earlyStoppingRules" json:"early_stopping_rules,omitempty"`
}

func (m *GetEarlyStoppingRulesReply) Reset()                    { *m = GetEarlyStoppingRulesReply{} }
func (m *GetEarlyStoppingRulesReply) String() string            { return proto.CompactTextString(m) }
func (*GetEarlyStoppingRulesReply) ProtoMessage()               {}
func (*GetEarlyStoppingRulesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetEarlyStoppingRulesReply) GetEarlyStoppingRules() []*EarlyStoppingRule {
	if m != nil {
		return m.EarlyStoppingRules
	}
	return nil
}

// *
// EarlyStoppingRule represents single early stopping rule.
type EarlyStoppingRule struct {
	Name       string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value      string         `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Comparison ComparisonType `protobuf:"varint,3,opt,name=comparison,enum=api.v1.beta1.ComparisonType" json:"comparison,omitempty"`
	// Defines quantity of intermediate results that should be received before applying the rule.
	// If start step is empty, rule is applied from the first recorded metric.
	StartStep int32 `protobuf:"varint,4,opt,name=start_step,json=startStep" json:"start_step,omitempty"`
}

func (m *EarlyStoppingRule) Reset()                    { *m = EarlyStoppingRule{} }
func (m *EarlyStoppingRule) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingRule) ProtoMessage()               {}
func (*EarlyStoppingRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *EarlyStoppingRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EarlyStoppingRule) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EarlyStoppingRule) GetComparison() ComparisonType {
	if m != nil {
		return m.Comparison
	}
	return ComparisonType_UNKNOWN_COMPARISON
}

func (m *EarlyStoppingRule) GetStartStep() int32 {
	if m != nil {
		return m.StartStep
	}
	return 0
}

type ValidateEarlyStoppingSettingsRequest struct {
	EarlyStopping *EarlyStoppingSpec `protobuf:"bytes,1,opt,name=early_stopping,json=earlyStopping" json:"early_stopping,omitempty"`
}

func (m *ValidateEarlyStoppingSettingsRequest) Reset()         { *m = ValidateEarlyStoppingSettingsRequest{} }
func (m *ValidateEarlyStoppingSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateEarlyStoppingSettingsRequest) ProtoMessage()    {}
func (*ValidateEarlyStoppingSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33}
}

func (m *ValidateEarlyStoppingSettingsRequest) GetEarlyStopping() *EarlyStoppingSpec {
	if m != nil {
		return m.EarlyStopping
	}
	return nil
}

// *
// Return INVALID_ARGUMENT Error if Early Stopping Settings are not Valid
type ValidateEarlyStoppingSettingsReply struct {
}

func (m *ValidateEarlyStoppingSettingsReply) Reset()         { *m = ValidateEarlyStoppingSettingsReply{} }
func (m *ValidateEarlyStoppingSettingsReply) String() string { return proto.CompactTextString(m) }
func (*ValidateEarlyStoppingSettingsReply) ProtoMessage()    {}
func (*ValidateEarlyStoppingSettingsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

type SetTrialStatusRequest struct {
	TrialName string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
}

func (m *SetTrialStatusRequest) Reset()                    { *m = SetTrialStatusRequest{} }
func (m *SetTrialStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTrialStatusRequest) ProtoMessage()               {}
func (*SetTrialStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SetTrialStatusRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

type SetTrialStatusReply struct {
}

func (m *SetTrialStatusReply) Reset()                    { *m = SetTrialStatusReply{} }
func (m *SetTrialStatusReply) String() string            { return proto.CompactTextString(m) }
func (*SetTrialStatusReply) ProtoMessage()               {}
func (*SetTrialStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func init() {
	proto.RegisterType((*Experiment)(nil), "api.v1.beta1.Experiment")
	proto.RegisterType((*ExperimentSpec)(nil), "api.v1.beta1.ExperimentSpec")
	proto.RegisterType((*ExperimentSpec_ParameterSpecs)(nil), "api.v1.beta1.ExperimentSpec.ParameterSpecs")
	proto.RegisterType((*ParameterSpec)(nil), "api.v1.beta1.ParameterSpec")
	proto.RegisterType((*FeasibleSpace)(nil), "api.v1.beta1.FeasibleSpace")
	proto.RegisterType((*ObjectiveSpec)(nil), "api.v1.beta1.ObjectiveSpec")
	proto.RegisterType((*AlgorithmSpec)(nil), "api.v1.beta1.AlgorithmSpec")
	proto.RegisterType((*AlgorithmSetting)(nil), "api.v1.beta1.AlgorithmSetting")
	proto.RegisterType((*EarlyStoppingSpec)(nil), "api.v1.beta1.EarlyStoppingSpec")
	proto.RegisterType((*EarlyStoppingSetting)(nil), "api.v1.beta1.EarlyStoppingSetting")
	proto.RegisterType((*NasConfig)(nil), "api.v1.beta1.NasConfig")
	proto.RegisterType((*NasConfig_Operations)(nil), "api.v1.beta1.NasConfig.Operations")
	proto.RegisterType((*GraphConfig)(nil), "api.v1.beta1.GraphConfig")
	proto.RegisterType((*Operation)(nil), "api.v1.beta1.Operation")
	proto.RegisterType((*Operation_ParameterSpecs)(nil), "api.v1.beta1.Operation.ParameterSpecs")
	proto.RegisterType((*Trial)(nil), "api.v1.beta1.Trial")
	proto.RegisterType((*TrialSpec)(nil), "api.v1.beta1.TrialSpec")
	proto.RegisterType((*TrialSpec_ParameterAssignments)(nil), "api.v1.beta1.TrialSpec.ParameterAssignments")
	proto.RegisterType((*ParameterAssignment)(nil), "api.v1.beta1.ParameterAssignment")
	proto.RegisterType((*TrialStatus)(nil), "api.v1.beta1.TrialStatus")
	proto.RegisterType((*Observation)(nil), "api.v1.beta1.Observation")
	proto.RegisterType((*Metric)(nil), "api.v1.beta1.Metric")
	proto.RegisterType((*ReportObservationLogRequest)(nil), "api.v1.beta1.ReportObservationLogRequest")
	proto.RegisterType((*ReportObservationLogReply)(nil), "api.v1.beta1.ReportObservationLogReply")
	proto.RegisterType((*ObservationLog)(nil), "api.v1.beta1.ObservationLog")
	proto.RegisterType((*MetricLog)(nil), "api.v1.beta1.MetricLog")
	proto.RegisterType((*GetObservationLogRequest)(nil), "api.v1.beta1.GetObservationLogRequest")
	proto.RegisterType((*GetObservationLogReply)(nil), "api.v1.beta1.GetObservationLogReply")
	proto.RegisterType((*DeleteObservationLogRequest)(nil), "api.v1.beta1.DeleteObservationLogRequest")
	proto.RegisterType((*DeleteObservationLogReply)(nil), "api.v1.beta1.DeleteObservationLogReply")
	proto.RegisterType((*GetSuggestionsRequest)(nil), "api.v1.beta1.GetSuggestionsRequest")
	proto.RegisterType((*GetSuggestionsReply)(nil), "api.v1.beta1.GetSuggestionsReply")
	proto.RegisterType((*GetSuggestionsReply_ParameterAssignments)(nil), "api.v1.beta1.GetSuggestionsReply.ParameterAssignments")
	proto.RegisterType((*ValidateAlgorithmSettingsRequest)(nil), "api.v1.beta1.ValidateAlgorithmSettingsRequest")
	proto.RegisterType((*ValidateAlgorithmSettingsReply)(nil), "api.v1.beta1.ValidateAlgorithmSettingsReply")
	proto.RegisterType((*GetEarlyStoppingRulesRequest)(nil), "api.v1.beta1.GetEarlyStoppingRulesRequest")
	proto.RegisterType((*GetEarlyStoppingRulesReply)(nil), "api.v1.beta1.GetEarlyStoppingRulesReply")
	proto.RegisterType((*EarlyStoppingRule)(nil), "api.v1.beta1.EarlyStoppingRule")
	proto.RegisterType((*ValidateEarlyStoppingSettingsRequest)(nil), "api.v1.beta1.ValidateEarlyStoppingSettingsRequest")
	proto.RegisterType((*ValidateEarlyStoppingSettingsReply)(nil), "api.v1.beta1.ValidateEarlyStoppingSettingsReply")
	proto.RegisterType((*SetTrialStatusRequest)(nil), "api.v1.beta1.SetTrialStatusRequest")
	proto.RegisterType((*SetTrialStatusReply)(nil), "api.v1.beta1.SetTrialStatusReply")
	proto.RegisterEnum("api.v1.beta1.ParameterType", ParameterType_name, ParameterType_value)
	proto.RegisterEnum("api.v1.beta1.ObjectiveType", ObjectiveType_name, ObjectiveType_value)
	proto.RegisterEnum("api.v1.beta1.ComparisonType", ComparisonType_name, ComparisonType_value)
	proto.RegisterEnum("api.v1.beta1.TrialStatus_TrialConditionType", TrialStatus_TrialConditionType_name, TrialStatus_TrialConditionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DBManager service

type DBManagerClient interface {
	// *
	// Report a log of Observations for a Trial.
	// The log consists of timestamp and value of metric.
	// Katib store every log of metrics.
	// You can see accuracy curve or other metric logs on UI.
	ReportObservationLog(ctx context.Context, in *ReportObservationLogRequest, opts ...grpc.CallOption) (*ReportObservationLogReply, error)
	// *
	// Get all log of Observations for a Trial.
	GetObservationLog(ctx context.Context, in *GetObservationLogRequest, opts ...grpc.CallOption) (*GetObservationLogReply, error)
	// *
	// Delete all log of Observations for a Trial.
	DeleteObservationLog(ctx context.Context, in *DeleteObservationLogRequest, opts ...grpc.CallOption) (*DeleteObservationLogReply, error)
}

type dBManagerClient struct {
	cc *grpc.ClientConn
}

func NewDBManagerClient(cc *grpc.ClientConn) DBManagerClient {
	return &dBManagerClient{cc}
}

func (c *dBManagerClient) ReportObservationLog(ctx context.Context, in *ReportObservationLogRequest, opts ...grpc.CallOption) (*ReportObservationLogReply, error) {
	out := new(ReportObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.DBManager/ReportObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBManagerClient) GetObservationLog(ctx context.Context, in *GetObservationLogRequest, opts ...grpc.CallOption) (*GetObservationLogReply, error) {
	out := new(GetObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.DBManager/GetObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBManagerClient) DeleteObservationLog(ctx context.Context, in *DeleteObservationLogRequest, opts ...grpc.CallOption) (*DeleteObservationLogReply, error) {
	out := new(DeleteObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.DBManager/DeleteObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBManager service

type DBManagerServer interface {
	// *
	// Report a log of Observations for a Trial.
	// The log consists of timestamp and value of metric.
	// Katib store every log of metrics.
	// You can see accuracy curve or other metric logs on UI.
	ReportObservationLog(context.Context, *ReportObservationLogRequest) (*ReportObservationLogReply, error)
	// *
	// Get all log of Observations for a Trial.
	GetObservationLog(context.Context, *GetObservationLogRequest) (*GetObservationLogReply, error)
	// *
	// Delete all log of Observations for a Trial.
	DeleteObservationLog(context.Context, *DeleteObservationLogRequest) (*DeleteObservationLogReply, error)
}

func RegisterDBManagerServer(s *grpc.Server, srv DBManagerServer) {
	s.RegisterService(&_DBManager_serviceDesc, srv)
}

func _DBManager_ReportObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBManagerServer).ReportObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.DBManager/ReportObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBManagerServer).ReportObservationLog(ctx, req.(*ReportObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBManager_GetObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBManagerServer).GetObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.DBManager/GetObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBManagerServer).GetObservationLog(ctx, req.(*GetObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBManager_DeleteObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBManagerServer).DeleteObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.DBManager/DeleteObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBManagerServer).DeleteObservationLog(ctx, req.(*DeleteObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.beta1.DBManager",
	HandlerType: (*DBManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportObservationLog",
			Handler:    _DBManager_ReportObservationLog_Handler,
		},
		{
			MethodName: "GetObservationLog",
			Handler:    _DBManager_GetObservationLog_Handler,
		},
		{
			MethodName: "DeleteObservationLog",
			Handler:    _DBManager_DeleteObservationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for Suggestion service

type SuggestionClient interface {
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error)
	ValidateAlgorithmSettings(ctx context.Context, in *ValidateAlgorithmSettingsRequest, opts ...grpc.CallOption) (*ValidateAlgorithmSettingsReply, error)
}

type suggestionClient struct {
	cc *grpc.ClientConn
}

func NewSuggestionClient(cc *grpc.ClientConn) SuggestionClient {
	return &suggestionClient{cc}
}

func (c *suggestionClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error) {
	out := new(GetSuggestionsReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.Suggestion/GetSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionClient) ValidateAlgorithmSettings(ctx context.Context, in *ValidateAlgorithmSettingsRequest, opts ...grpc.CallOption) (*ValidateAlgorithmSettingsReply, error) {
	out := new(ValidateAlgorithmSettingsReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.Suggestion/ValidateAlgorithmSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Suggestion service

type SuggestionServer interface {
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsReply, error)
	ValidateAlgorithmSettings(context.Context, *ValidateAlgorithmSettingsRequest) (*ValidateAlgorithmSettingsReply, error)
}

func RegisterSuggestionServer(s *grpc.Server, srv SuggestionServer) {
	s.RegisterService(&_Suggestion_serviceDesc, srv)
}

func _Suggestion_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.Suggestion/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggestion_ValidateAlgorithmSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAlgorithmSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.Suggestion/ValidateAlgorithmSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, req.(*ValidateAlgorithmSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.beta1.Suggestion",
	HandlerType: (*SuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestions",
			Handler:    _Suggestion_GetSuggestions_Handler,
		},
		{
			MethodName: "ValidateAlgorithmSettings",
			Handler:    _Suggestion_ValidateAlgorithmSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for EarlyStopping service

type EarlyStoppingClient interface {
	GetEarlyStoppingRules(ctx context.Context, in *GetEarlyStoppingRulesRequest, opts ...grpc.CallOption) (*GetEarlyStoppingRulesReply, error)
	SetTrialStatus(ctx context.Context, in *SetTrialStatusRequest, opts ...grpc.CallOption) (*SetTrialStatusReply, error)
	ValidateEarlyStoppingSettings(ctx context.Context, in *ValidateEarlyStoppingSettingsRequest, opts ...grpc.CallOption) (*ValidateEarlyStoppingSettingsReply, error)
}

type earlyStoppingClient struct {
	cc *grpc.ClientConn
}

func NewEarlyStoppingClient(cc *grpc.ClientConn) EarlyStoppingClient {
	return &earlyStoppingClient{cc}
}

func (c *earlyStoppingClient) GetEarlyStoppingRules(ctx context.Context, in *GetEarlyStoppingRulesRequest, opts ...grpc.CallOption) (*GetEarlyStoppingRulesReply, error) {
	out := new(GetEarlyStoppingRulesReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.EarlyStopping/GetEarlyStoppingRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *earlyStoppingClient) SetTrialStatus(ctx context.Context, in *SetTrialStatusRequest, opts ...grpc.CallOption) (*SetTrialStatusReply, error) {
	out := new(SetTrialStatusReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.EarlyStopping/SetTrialStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *earlyStoppingClient) ValidateEarlyStoppingSettings(ctx context.Context, in *ValidateEarlyStoppingSettingsRequest, opts ...grpc.CallOption) (*ValidateEarlyStoppingSettingsReply, error) {
	out := new(ValidateEarlyStoppingSettingsReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.EarlyStopping/ValidateEarlyStoppingSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EarlyStopping service

type EarlyStoppingServer interface {
	GetEarlyStoppingRules(context.Context, *GetEarlyStoppingRulesRequest) (*GetEarlyStoppingRulesReply, error)
	SetTrialStatus(context.Context, *SetTrialStatusRequest) (*SetTrialStatusReply, error)
	ValidateEarlyStoppingSettings(context.Context, *ValidateEarlyStoppingSettingsRequest) (*ValidateEarlyStoppingSettingsReply, error)
}

func RegisterEarlyStoppingServer(s *grpc.Server, srv EarlyStoppingServer) {
	s.RegisterService(&_EarlyStopping_serviceDesc, srv)
}

func _EarlyStopping_GetEarlyStoppingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEarlyStoppingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).GetEarlyStoppingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.EarlyStopping/GetEarlyStoppingRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).GetEarlyStoppingRules(ctx, req.(*GetEarlyStoppingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EarlyStopping_SetTrialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrialStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).SetTrialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.EarlyStopping/SetTrialStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).SetTrialStatus(ctx, req.(*SetTrialStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EarlyStopping_ValidateEarlyStoppingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEarlyStoppingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).ValidateEarlyStoppingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.EarlyStopping/ValidateEarlyStoppingSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).ValidateEarlyStoppingSettings(ctx, req.(*ValidateEarlyStoppingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EarlyStopping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.beta1.EarlyStopping",
	HandlerType: (*EarlyStoppingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEarlyStoppingRules",
			Handler:    _EarlyStopping_GetEarlyStoppingRules_Handler,
		},
		{
			MethodName: "SetTrialStatus",
			Handler:    _EarlyStopping_SetTrialStatus_Handler,
		},
		{
			MethodName: "ValidateEarlyStoppingSettings",
			Handler:    _EarlyStopping_ValidateEarlyStoppingSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xdb, 0x72, 0x1b, 0x49,
	0x19, 0xce, 0xe8, 0x60, 0x47, 0xbf, 0x2c, 0x79, 0xd2, 0x96, 0xb3, 0xb2, 0xb3, 0xbb, 0x71, 0x86,
	0x90, 0xcd, 0x26, 0x29, 0x91, 0x18, 0x48, 0x85, 0xda, 0x50, 0x20, 0x4b, 0x13, 0x97, 0xb2, 0xb2,
	0xe4, 0xb4, 0x64, 0xc8, 0xb2, 0x54, 0x4d, 0xb5, 0xa5, 0x8e, 0x76, 0xc2, 0x9c, 0x98, 0x69, 0xa5,
	0x2c, 0xb8, 0xa4, 0xc2, 0x1d, 0x17, 0x54, 0x71, 0xc5, 0x2b, 0x70, 0xc9, 0x0b, 0x70, 0xc5, 0x03,
	0x50, 0x3c, 0x00, 0x3c, 0x00, 0xef, 0x40, 0x75, 0xcf, 0x68, 0x4e, 0x1a, 0xc9, 0x87, 0xc0, 0xde,
	0x4d, 0xff, 0xff, 0xf7, 0x77, 0xff, 0x87, 0xfe, 0x0f, 0x2d, 0x41, 0x89, 0x38, 0x7a, 0xc3, 0x71,
	0x6d, 0x66, 0xa3, 0x0d, 0xfe, 0xf9, 0xee, 0x49, 0xe3, 0x94, 0x32, 0xf2, 0x44, 0xc1, 0x00, 0xea,
	0x99, 0x43, 0x5d, 0xdd, 0xa4, 0x16, 0x43, 0x08, 0x0a, 0x16, 0x31, 0x69, 0x5d, 0xda, 0x93, 0xee,
	0x97, 0xb0, 0xf8, 0x46, 0x8f, 0xa1, 0xe0, 0x39, 0x74, 0x54, 0xcf, 0xed, 0x49, 0xf7, 0xcb, 0xfb,
	0x1f, 0x37, 0xe2, 0xe2, 0x8d, 0x48, 0x76, 0xe0, 0xd0, 0x11, 0x16, 0x48, 0xe5, 0x7d, 0x01, 0xaa,
	0x49, 0x06, 0x1a, 0xc2, 0xa6, 0x43, 0x5c, 0x62, 0x52, 0x46, 0x5d, 0x8d, 0x83, 0x3c, 0x71, 0x46,
	0x79, 0xff, 0xe1, 0xaa, 0xfd, 0x1a, 0xc7, 0x73, 0x19, 0xbe, 0xf2, 0x70, 0xd5, 0x49, 0xac, 0xd1,
	0x8f, 0xa0, 0x64, 0x9f, 0xbe, 0xa5, 0x23, 0xa6, 0xbf, 0xa3, 0x81, 0x7e, 0xb7, 0x92, 0xfb, 0xf5,
	0xe7, 0x6c, 0xa1, 0x5e, 0x84, 0xe6, 0xa2, 0xc4, 0x98, 0xd8, 0xae, 0xce, 0xbe, 0x31, 0xeb, 0xf9,
	0x2c, 0xd1, 0xe6, 0x9c, 0xed, 0x8b, 0x86, 0x68, 0xf4, 0x02, 0xaa, 0x94, 0xb8, 0xc6, 0x4c, 0xf3,
	0x98, 0xed, 0x38, 0xba, 0x35, 0xa9, 0x17, 0x84, 0xfc, 0xed, 0x94, 0x29, 0x1c, 0x33, 0x08, 0x20,
	0x62, 0x8f, 0x0a, 0x8d, 0x93, 0xd0, 0x63, 0xa8, 0x71, 0x7b, 0x0c, 0x83, 0x1a, 0x1a, 0x73, 0x75,
	0x62, 0x68, 0x23, 0x7b, 0x6a, 0xb1, 0x7a, 0x71, 0x4f, 0xba, 0x5f, 0xc4, 0x68, 0xce, 0x1b, 0x72,
	0x56, 0x8b, 0x73, 0xd0, 0x3d, 0xd8, 0x34, 0xc9, 0x59, 0x02, 0xbc, 0x26, 0xc0, 0x15, 0x93, 0x9c,
	0xc5, 0x70, 0x4f, 0x01, 0x2c, 0xe2, 0x69, 0x23, 0xdb, 0x7a, 0xa3, 0x4f, 0xea, 0xeb, 0x42, 0xbb,
	0x8f, 0x92, 0xda, 0xf5, 0x88, 0xd7, 0x12, 0x6c, 0x5c, 0xb2, 0xe6, 0x9f, 0xbb, 0x47, 0x50, 0x4d,
	0x7a, 0x1c, 0x7d, 0x01, 0x10, 0xfa, 0x9c, 0x87, 0x2c, 0xbf, 0xe8, 0xa7, 0x84, 0x04, 0x8e, 0xc1,
	0x95, 0xbf, 0x48, 0x50, 0x49, 0x70, 0x33, 0xef, 0xd7, 0x01, 0x44, 0x61, 0xd5, 0xd8, 0xcc, 0xf1,
	0x23, 0x59, 0x5d, 0x7a, 0xcc, 0x70, 0xe6, 0x50, 0x5c, 0x71, 0xe2, 0x4b, 0xbe, 0xc7, 0x1b, 0x4a,
	0x3c, 0xfd, 0xd4, 0xa0, 0x9a, 0xe7, 0x90, 0x11, 0xcd, 0x0e, 0xe9, 0x8b, 0x00, 0x33, 0xe0, 0x10,
	0x5c, 0x79, 0x13, 0x5f, 0x2a, 0x5f, 0x43, 0x25, 0xc1, 0x47, 0x32, 0xe4, 0x4d, 0x72, 0x16, 0xe8,
	0xca, 0x3f, 0x05, 0x45, 0xb7, 0x84, 0x7e, 0x9c, 0xa2, 0x5b, 0xdc, 0x20, 0x43, 0xf7, 0x58, 0x3d,
	0xbf, 0x97, 0xe7, 0x06, 0xf1, 0x6f, 0x4e, 0xf3, 0x18, 0x75, 0xc4, 0xad, 0x28, 0x61, 0xf1, 0xad,
	0xfc, 0x4d, 0x82, 0x4a, 0xe2, 0x2e, 0xa2, 0xef, 0x41, 0x41, 0x18, 0x2b, 0x65, 0x19, 0x1b, 0x42,
	0x85, 0xb1, 0x02, 0xc8, 0xb7, 0x9d, 0xd8, 0xc4, 0x10, 0xa7, 0x4b, 0x58, 0x7c, 0xa3, 0x7d, 0xd8,
	0x0e, 0xaf, 0xb4, 0x66, 0x52, 0xe6, 0xea, 0x23, 0x4d, 0x38, 0x38, 0x2f, 0xce, 0xde, 0x0a, 0x99,
	0x47, 0x82, 0xd7, 0xe3, 0xfe, 0x7e, 0x0a, 0x1f, 0x91, 0xf1, 0x58, 0x67, 0xba, 0x6d, 0x11, 0x23,
	0x2e, 0xe4, 0xd5, 0x0b, 0xc2, 0x8a, 0xed, 0x88, 0x1d, 0x89, 0x79, 0xca, 0x7b, 0x09, 0x2a, 0x89,
	0x9c, 0x40, 0xdf, 0x85, 0x6a, 0x98, 0x15, 0x5a, 0x2c, 0xae, 0x95, 0x90, 0x2a, 0x0e, 0x3c, 0x02,
	0x14, 0xc1, 0x3c, 0xca, 0x98, 0x6e, 0x4d, 0xbc, 0x7a, 0x4e, 0xdc, 0xa5, 0x4f, 0x97, 0xe5, 0x9c,
	0x0f, 0xc3, 0x37, 0x48, 0x8a, 0xe2, 0x29, 0xcf, 0x41, 0x4e, 0xc3, 0x32, 0xef, 0x55, 0x0d, 0x8a,
	0xef, 0x88, 0x31, 0xa5, 0x41, 0xb8, 0xfc, 0x85, 0xf2, 0x07, 0x09, 0x6e, 0x2c, 0x64, 0xe6, 0x45,
	0x2d, 0x79, 0xb5, 0xc2, 0x12, 0x65, 0x55, 0xf6, 0x2f, 0xb7, 0xe6, 0xa7, 0x50, 0xcb, 0x82, 0x5e,
	0xc2, 0xa2, 0x7f, 0x48, 0x50, 0x0a, 0xb3, 0x19, 0x3d, 0x87, 0x8d, 0x89, 0x4b, 0x9c, 0x6f, 0xe6,
	0xc9, 0xef, 0x57, 0xd9, 0x9d, 0xa4, 0x72, 0x87, 0x1c, 0x11, 0xa4, 0x7f, 0x79, 0x12, 0x2d, 0xd0,
	0x01, 0x80, 0xed, 0x50, 0x97, 0xf0, 0xe8, 0x7b, 0x41, 0x45, 0x55, 0x96, 0x14, 0x8e, 0x46, 0x3f,
	0x44, 0xe2, 0x98, 0xd4, 0x6e, 0x0b, 0x20, 0xe2, 0xa0, 0x1f, 0x42, 0x29, 0xe4, 0x05, 0xf5, 0x23,
	0x55, 0x89, 0x42, 0x30, 0x8e, 0x90, 0x8a, 0x03, 0xe5, 0x98, 0x92, 0xe8, 0x13, 0x00, 0x6b, 0x6a,
	0x6a, 0x06, 0x99, 0xf9, 0x65, 0x88, 0xd7, 0xbc, 0x92, 0x35, 0x35, 0xbb, 0x82, 0x80, 0x6e, 0x43,
	0x59, 0xb7, 0x9c, 0x29, 0xd3, 0x3c, 0xfd, 0x37, 0xd4, 0x0f, 0x48, 0x11, 0x83, 0x20, 0x0d, 0x38,
	0x05, 0xdd, 0x81, 0x0d, 0x7b, 0xca, 0x22, 0x44, 0x5e, 0x20, 0xca, 0x3e, 0x4d, 0x40, 0x84, 0x1b,
	0x43, 0x55, 0xf8, 0x85, 0x08, 0x95, 0xd1, 0xc2, 0x3c, 0x2d, 0xe1, 0x4a, 0x48, 0x15, 0x75, 0xa7,
	0xbf, 0xd8, 0xd6, 0x7c, 0xa7, 0xdd, 0x5b, 0x62, 0xe3, 0x39, 0x1d, 0xed, 0x7f, 0x5d, 0x81, 0x7f,
	0x0b, 0x45, 0xd1, 0x16, 0x32, 0xaf, 0xd3, 0xc3, 0x44, 0x63, 0x4f, 0x45, 0x45, 0x88, 0x45, 0x3d,
	0x1d, 0x3d, 0x81, 0x35, 0x8f, 0x11, 0x36, 0xf5, 0x82, 0xca, 0xba, 0x93, 0x05, 0x17, 0x00, 0x1c,
	0x00, 0x95, 0xdf, 0xe7, 0xa0, 0x14, 0x6e, 0xf3, 0x21, 0xbd, 0x9a, 0xc0, 0x76, 0xe4, 0x65, 0xe2,
	0x79, 0xfa, 0xc4, 0xe2, 0x13, 0xc2, 0x5c, 0x95, 0x47, 0x4b, 0x34, 0x8f, 0xfc, 0xd2, 0x8c, 0x64,
	0x70, 0xcd, 0xc9, 0xa0, 0xee, 0x7e, 0x0d, 0xb5, 0x2c, 0x34, 0x6a, 0x41, 0x39, 0x7e, 0xa0, 0xef,
	0xfe, 0x3b, 0x4b, 0xdc, 0x1f, 0x09, 0xe2, 0xb8, 0x94, 0xf2, 0x13, 0xd8, 0xca, 0xc0, 0x5c, 0x22,
	0xc5, 0xff, 0x99, 0x83, 0x72, 0xcc, 0xc3, 0x3c, 0x1d, 0x3c, 0x46, 0x5c, 0xa6, 0x31, 0x3d, 0x94,
	0x2f, 0x09, 0xca, 0x50, 0x37, 0x29, 0xfa, 0x0c, 0x36, 0x47, 0xb6, 0xe9, 0x18, 0xd4, 0xbf, 0xbd,
	0x1c, 0xe3, 0x6f, 0x57, 0x8d, 0xc8, 0x02, 0xf8, 0x12, 0x4a, 0x23, 0xdb, 0xf2, 0x8b, 0xbd, 0x70,
	0x66, 0x35, 0xdb, 0x99, 0xe2, 0xd4, 0x46, 0x30, 0x60, 0x04, 0x78, 0xd1, 0x99, 0x22, 0x71, 0xf4,
	0x05, 0x94, 0xed, 0x53, 0x8f, 0xba, 0xef, 0xfc, 0x54, 0x2f, 0x64, 0xdd, 0x92, 0x7e, 0x04, 0xc0,
	0x71, 0xb4, 0xc2, 0x00, 0x2d, 0xee, 0x8e, 0xca, 0xb0, 0xde, 0xc2, 0x6a, 0x73, 0xa8, 0xb6, 0xe5,
	0x6b, 0x7c, 0x81, 0x4f, 0x7a, 0xbd, 0x4e, 0xef, 0x50, 0x96, 0x50, 0x05, 0x4a, 0x83, 0x93, 0x56,
	0x4b, 0x55, 0xdb, 0x6a, 0x5b, 0xce, 0x21, 0x80, 0xb5, 0x2f, 0x3b, 0xdd, 0xae, 0xda, 0x96, 0xf3,
	0xfc, 0xfb, 0x45, 0xb3, 0xc3, 0xbf, 0x0b, 0x48, 0x86, 0x0d, 0xb5, 0x89, 0xbb, 0x5f, 0x0d, 0x86,
	0xfd, 0xe3, 0x63, 0xb5, 0x2d, 0x17, 0xf9, 0x2e, 0x27, 0xbd, 0x2f, 0x7b, 0xfd, 0x9f, 0xf7, 0xe4,
	0x35, 0xe5, 0xc7, 0x50, 0x8e, 0x69, 0x84, 0x1a, 0xb0, 0xee, 0x77, 0xc3, 0x79, 0x9c, 0x6b, 0x49,
	0xed, 0xfd, 0x66, 0x88, 0xe7, 0x20, 0x65, 0x1f, 0xd6, 0x7c, 0xd2, 0x25, 0x22, 0xf9, 0x3b, 0x09,
	0x6e, 0x61, 0xea, 0xd8, 0x2e, 0x8b, 0x9d, 0xdc, 0xb5, 0x27, 0x98, 0xfe, 0x7a, 0x4a, 0x3d, 0xc6,
	0x23, 0xeb, 0x4f, 0x77, 0xb1, 0xfd, 0x4a, 0x82, 0x22, 0x1a, 0x90, 0x0a, 0x9b, 0x31, 0xb7, 0x69,
	0x86, 0x3d, 0xc9, 0x1e, 0xcb, 0x53, 0x9b, 0x57, 0xed, 0xc4, 0x5a, 0xb9, 0x05, 0x3b, 0xd9, 0x4a,
	0x38, 0xc6, 0x4c, 0x79, 0x09, 0xd5, 0x24, 0x19, 0x3d, 0x83, 0x72, 0x30, 0x26, 0x18, 0xf6, 0xc4,
	0xcb, 0xae, 0xe2, 0xbe, 0x27, 0xf8, 0x26, 0x60, 0xce, 0x3f, 0x3d, 0xe5, 0x35, 0x94, 0x42, 0x86,
	0xb0, 0x4d, 0x37, 0xa9, 0xe6, 0x31, 0x62, 0x3a, 0xa1, 0x6d, 0xba, 0x49, 0x07, 0x9c, 0x80, 0x1e,
	0xc1, 0x9a, 0x2f, 0x19, 0x98, 0x94, 0xed, 0xfd, 0x00, 0xa3, 0xfc, 0x49, 0x82, 0xfa, 0x21, 0xbd,
	0x9a, 0x17, 0x6f, 0x87, 0xf6, 0x08, 0xbe, 0x1f, 0xa0, 0x40, 0x6d, 0x01, 0x48, 0xe6, 0x57, 0x3e,
	0x9d, 0x5f, 0x3b, 0x70, 0x9d, 0x5a, 0x63, 0x9f, 0xe9, 0x0f, 0x79, 0xeb, 0xd4, 0x1a, 0x73, 0x96,
	0xa2, 0xc1, 0xcd, 0x0c, 0xad, 0x1c, 0x63, 0x96, 0x15, 0x3a, 0xe9, 0x0a, 0xa1, 0x7b, 0x0e, 0xb7,
	0xda, 0xd4, 0xa0, 0x8c, 0x5e, 0xc5, 0x72, 0x1e, 0xf8, 0x6c, 0x69, 0x1e, 0xf8, 0x3f, 0xe6, 0x60,
	0xfb, 0x90, 0xb2, 0xc1, 0x74, 0x32, 0xa1, 0x9e, 0xdf, 0xd7, 0x83, 0x5d, 0x9f, 0x01, 0xd0, 0xf0,
	0x61, 0x16, 0xa8, 0x5d, 0x5f, 0xf6, 0x70, 0xc3, 0x31, 0x2c, 0x7a, 0x08, 0x6b, 0xe2, 0xf4, 0xf9,
	0x94, 0xb4, 0x95, 0x51, 0x5e, 0x70, 0x00, 0x41, 0x9f, 0x43, 0xd5, 0xf5, 0x4f, 0xd4, 0xac, 0xa9,
	0x79, 0x4a, 0x5d, 0xe1, 0xfa, 0xe2, 0x41, 0xae, 0x2e, 0xe1, 0x4a, 0xc0, 0xe9, 0x09, 0x06, 0xfa,
	0x01, 0xdc, 0x1c, 0x4d, 0x5d, 0x97, 0x5a, 0x4c, 0x4b, 0x89, 0x14, 0xc4, 0x70, 0x50, 0x0b, 0xb8,
	0x38, 0x21, 0xf5, 0x18, 0x6a, 0xcc, 0x66, 0xc4, 0x48, 0xcb, 0x04, 0x2f, 0x2e, 0xc1, 0x4b, 0x48,
	0x28, 0xff, 0xc9, 0xc1, 0x56, 0xda, 0x27, 0x3c, 0x9a, 0xbf, 0x5a, 0xd6, 0x92, 0xfc, 0xe4, 0x78,
	0x9a, 0x9a, 0xb7, 0x16, 0x77, 0xb8, 0x44, 0x73, 0x4a, 0xbe, 0x55, 0x73, 0x97, 0x7a, 0xab, 0xbe,
	0x82, 0x5a, 0xf2, 0xad, 0xaa, 0xb9, 0x53, 0x23, 0x18, 0x80, 0x56, 0xbf, 0x58, 0xf1, 0xd4, 0xa0,
	0x18, 0xd1, 0x34, 0xe9, 0xff, 0xdc, 0x2a, 0x7f, 0x09, 0x7b, 0x3f, 0x23, 0x86, 0x3e, 0x26, 0x8c,
	0xa6, 0x87, 0xfc, 0x0f, 0xbf, 0x8d, 0xca, 0x1e, 0x7c, 0xba, 0x62, 0x77, 0x9e, 0x03, 0x7f, 0x95,
	0xe0, 0xe3, 0x43, 0xca, 0x16, 0x3c, 0xf1, 0x6d, 0xa7, 0xc2, 0x23, 0x40, 0xe3, 0x53, 0xcd, 0x24,
	0x16, 0x99, 0xf0, 0x0b, 0x36, 0x1e, 0xbb, 0xd4, 0xf3, 0x82, 0x4a, 0x24, 0x8f, 0x4f, 0x8f, 0x7c,
	0x46, 0xd3, 0xa7, 0x2b, 0x36, 0xec, 0x2e, 0x51, 0x9a, 0xdf, 0xd5, 0x65, 0x77, 0x40, 0xba, 0xf2,
	0x1d, 0x50, 0xfe, 0x9c, 0x7e, 0x45, 0x71, 0xf2, 0xc5, 0xdb, 0x20, 0x7a, 0x0e, 0xc0, 0x47, 0x11,
	0xe2, 0xea, 0x5e, 0x38, 0x79, 0xa4, 0xea, 0x60, 0x2b, 0xe4, 0x8b, 0x49, 0x23, 0x86, 0x8f, 0xca,
	0x73, 0xf8, 0xcc, 0x2e, 0x06, 0xe5, 0x79, 0xc0, 0xdf, 0xda, 0x16, 0xdc, 0x9d, 0x47, 0x39, 0xeb,
	0x69, 0x15, 0x86, 0x72, 0xf1, 0x77, 0x1c, 0xe9, 0x2a, 0xbf, 0xe3, 0x28, 0x77, 0x41, 0x39, 0xe7,
	0x3c, 0x7e, 0xb3, 0x9e, 0xc2, 0xf6, 0x80, 0xb2, 0xf8, 0x9c, 0x7c, 0xb1, 0x92, 0xbd, 0x0d, 0x5b,
	0x69, 0x39, 0xc7, 0x98, 0x3d, 0x38, 0x89, 0xfd, 0xb4, 0x22, 0x86, 0x25, 0x19, 0x36, 0x82, 0xc9,
	0x46, 0x1b, 0x7e, 0x75, 0xac, 0xca, 0xd7, 0xf8, 0x24, 0xd4, 0xee, 0x9f, 0x1c, 0x74, 0x55, 0x59,
	0x42, 0xeb, 0x90, 0xef, 0xf4, 0x86, 0x72, 0x0e, 0x6d, 0xc0, 0xf5, 0x76, 0x67, 0xd0, 0xc2, 0xea,
	0x50, 0x95, 0xf3, 0x68, 0x13, 0xca, 0xad, 0xe6, 0x50, 0x3d, 0xec, 0xe3, 0x4e, 0xab, 0xd9, 0x95,
	0x0b, 0x0f, 0x9e, 0xc5, 0x7e, 0xa6, 0x98, 0xcf, 0x60, 0xf3, 0x81, 0xe9, 0x1a, 0x17, 0x3e, 0xea,
	0xf4, 0x3a, 0x47, 0x9d, 0x5f, 0xf0, 0x3d, 0xf9, 0xaa, 0xf9, 0xda, 0x5f, 0xe5, 0x1e, 0xbc, 0x84,
	0x6a, 0x32, 0x64, 0xe8, 0x26, 0xa0, 0xb9, 0x46, 0xad, 0xfe, 0xd1, 0x71, 0x13, 0x77, 0x06, 0x7d,
	0xbe, 0x4b, 0x09, 0x8a, 0xea, 0xab, 0x93, 0x66, 0x57, 0x96, 0xd0, 0x75, 0x28, 0x74, 0xd5, 0xc1,
	0x40, 0xce, 0xf1, 0x73, 0x0e, 0xc5, 0xac, 0x87, 0xe5, 0xfc, 0xfe, 0xdf, 0x73, 0x50, 0x6a, 0x1f,
	0x04, 0x97, 0x1c, 0xbd, 0x85, 0x5a, 0xd6, 0xb4, 0x82, 0x3e, 0x4f, 0xc6, 0x69, 0xc5, 0x58, 0xb5,
	0xfb, 0xd9, 0x45, 0xa0, 0x3c, 0x57, 0x08, 0xdc, 0x58, 0xe8, 0xdf, 0xe8, 0xde, 0x42, 0x35, 0xcf,
	0x3e, 0xe5, 0xee, 0xb9, 0x38, 0x7e, 0xc4, 0x5b, 0xa8, 0x65, 0xf5, 0xe0, 0xb4, 0x39, 0x2b, 0xba,
	0x7c, 0xda, 0x9c, 0xa5, 0x2d, 0x7d, 0xff, 0xdf, 0x12, 0x40, 0xd4, 0x79, 0xd0, 0x6b, 0xa8, 0x26,
	0x5b, 0x11, 0xfa, 0xce, 0xea, 0x46, 0xe5, 0x1f, 0x77, 0xe7, 0xdc, 0x6e, 0x86, 0x66, 0xb0, 0xb3,
	0xb4, 0xb2, 0xa2, 0x46, 0x52, 0xfe, 0xbc, 0x02, 0xbf, 0xfb, 0xe8, 0xc2, 0x78, 0x6e, 0xe3, 0xbf,
	0x72, 0x50, 0x49, 0xe4, 0x1d, 0x32, 0xc5, 0x1c, 0xb3, 0x58, 0x0e, 0xd1, 0x83, 0x05, 0x43, 0x96,
	0x16, 0xfa, 0xdd, 0xfb, 0x17, 0xc2, 0x72, 0xdb, 0x5f, 0x43, 0x35, 0x99, 0xa1, 0x69, 0xaf, 0x66,
	0xe6, 0x7d, 0xda, 0xab, 0x19, 0x49, 0x8e, 0xde, 0x4b, 0xf0, 0xc9, 0xca, 0xd2, 0x82, 0xf6, 0xb3,
	0x5d, 0xb5, 0xaa, 0xee, 0xed, 0x3e, 0xbe, 0x94, 0x8c, 0x63, 0xcc, 0x4e, 0xd7, 0xc4, 0x3f, 0x07,
	0xdf, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x4d, 0xf6, 0xdf, 0x46, 0x18, 0x00, 0x00,
}
